from seleniumbase import BaseCase
from selenium.webdriver.common.keys import Keys
BaseCase.main(__name__, __file__)
import time
import pyautogui
import os



class RecorderTest(BaseCase):
    def test_recording(self):
        try:

            # savin the tart time
            self.start_time = int(time.time())
            
            # setting up the input folder for videos 
            self.input_folder = "C:\\Users\\usama\\Desktop\\usama\\video_gen\\output"
            
            # If you used the content of someone else then add his channel name in this to gave the credit to the person
            self.channel_name = " @almostperfectrestoration "
            
            # calling the initial setup to open youtube and chatgpt and navigate to the uploading section
            self.initial_setup()

            self.video_no = 1

            # looping through the names of all videos in input folder
            for file in os.listdir(self.input_folder):
                try:
                    if file.endswith(".mp4") and not file.startswith("done_"):
                        
                        # generating the full path of the current video
                        input_video = os.path.join(self.input_folder, file)
                        
                        # clicking upload button 
                        self.click("#select-files-button",timeout=100)
                        
                        # calling the file explorer function to select the file from the popin up file explorer
                        self.file_explorer(input_video)
                        
                        # all of my videos contained this _overlayed.mp4 so I am removing it from the video title but feel free to remove _overlayed from the below line of code
                        video_title = file.replace("_overlayed.mp4","")
                        
                        # ALSO COMMENT THIS LINE ⬇↓↓↓↓↓
                        video_title = video_title.split("-")[1]

                        # this data variable is a dictionary which contains the description and tags generated by chatgpt.
                        data = self.generate_description_and_tags(video_title=video_title)
                        
                        # add some #hashtags here to improve the seo.
                        video_title = video_title + "#viral #viralshorts #diy #art #satisfying #craft #handmade #fun #metal"
                        
                        # here I am selecting any text present in the video_title input field and then typing the video title there to avoid conflicts
                        self.type("#title-textarea #textbox",text=f"{Keys.CONTROL}a{Keys.CONTROL}{video_title}",timeout=100)
                        
                        # monitoring the title characters
                        title_chars = self.get_text("div#container-content > div > div").split("/")[0]
                        
                        # checking if title characters are less than 100 then adding more hashtags to the video
                        while int(title_chars) < 100:
                            if self.is_element_visible("ytcp-button#add-button div"):
                                self.click("ytcp-button#add-button div")
                                title_chars = self.get_text("div#container-content > div > div").split("/")[0]
                            else:
                                break

                        
                        
                        # checking if title characters are more than 100 and if they are, then removing the extra characters.
                        while int(title_chars) > 100:
                            self.send_keys("#title-textarea #textbox","\b")
                            self.sleep(0.03)
                            title_chars = self.get_text("div#container-content > div > div").split("/")[0]

                        
                        # adding description to the textbox
                        try:
                            self.type("#description-textarea #textbox",data["description"],timeout=100)
                        except Exception as e:
                            print(f"\n\nAn error has occured during typing description in video no: {self.video_no}\nError:",e)        

                        
                        # clicking on video not made for kids
                        self.click("tp-yt-paper-radio-button[name='VIDEO_MADE_FOR_KIDS_NOT_MFK'] div#radioLabel > ytcp-ve",timeout=100)
                        self.click('h3:contains("Age restriction (advanced)")',timeout=100)
                        
                        # clicking on show more
                        self.click("ytcp-button#toggle-button div",timeout=100)
                        
                        # clickin on english language
                        self.scroll_to_element("#language-subtitles-cc > div.section-label-with-description.style-scope.ytcp-video-metadata-editor-advanced",timeout=100)
                        self.assert_exact_text("Language and captions certification","#language-subtitles-cc > div.section-label-with-description.style-scope.ytcp-video-metadata-editor-advanced",timeout=100)
                        self.click("#language-subtitles-cc > div.section-label-with-description.style-scope.ytcp-video-metadata-editor-advanced",timeout=100)
                        self.assert_element("#language-input",timeout=100)
                        self.click("#language-input ytcp-dropdown-trigger > div",timeout=100)
                        self.click("#text-item-51 > ytcp-ve > tp-yt-paper-item-body > div > div",timeout=100)
                        
                        # entering tags
                        self.send_keys("#child-input > ytcp-free-text-chip-bar > #chip-bar > div > input#text-input", data["tags"],timeout=100)
                        
                        #making sure that video has uploaded
                        self.assert_exact_text("Saved as private", "tp-yt-paper-dialog#dialog > div > div > div > div > ytcp-animatable > ytcp-badge > div > div",timeout=1000)
                        self.click("ytcp-button#next-button div",timeout=100)
                        self.click("ytcp-button#next-button div",timeout=100)
                        self.assert_exact_text("No issues found", "span#results-description",timeout=1000)
                        self.click("ytcp-button#next-button div",timeout=100)
                        self.click("tp-yt-paper-radio-button[name='PUBLIC'] div#offRadio",timeout=100)
                        self.click("ytcp-button#done-button div",timeout=100)
                        self.click("ytcp-button#close-button div",timeout=100)
                        self.click("ytcp-button#upload-button div",timeout=100)
                        
                        #incresing the video count
                        self.video_no +=1
                        
                        # renaming the video name by adding a done_ in it's start
                        os.rename(input_video,f"output\\done_{file}")

                except Exception as e:
                    print(f"\n\nAn error has occured during video no: {self.video_no}\nError:",e)
                    
                    # if some error occurs the recovering by going to Youtube Homepage
                    self.open("https://www.youtube.com/")
                   
                    self.click("/html/body/ytd-app/div[1]/div/ytd-masthead/div[4]/div[3]/div[2]/ytd-topbar-menu-button-renderer[1]/div/a/yt-icon-button/button")
                    self.click("/html/body/ytd-app/ytd-popup-container/tp-yt-iron-dropdown/div/ytd-multi-page-menu-renderer/div[3]/div[1]/yt-multi-page-menu-section-renderer/div[2]/ytd-compact-link-renderer[1]/a",timeout=20)        


            # setting the end time
            end_time = int(time.time())
            
            # setting the total minutes the program took to upload videos 
            total_min = (end_time - self.start_time)//60
            
            # setting the total seconds the program took to upload videos 
            sec = (end_time - self.start_time) % 60
            
            # printing the total time
            print(f"Video processing completed in {int(total_min)} min and {sec} sec.")

        except Exception as e:
            print(f"An Exception has occured before processing the video.\n The EXCEPTION: ",e)
                    

    def file_explorer(self,video_path):
        # Assuming the file explorer is already open and in focus
        # Adjust these coordinates according to your screen resolution and file explorer position if they don't work
        file_explorer_x = 500
        file_explorer_y = 500

        # Move the mouse to the file explorer window
        pyautogui.moveTo(file_explorer_x, file_explorer_y, duration=0.1)

        # Click to focus on the file explorer window
        pyautogui.click()

        # Wait for a brief moment to ensure the file explorer window is in focus
        time.sleep(1)

        # Navigate to the file path
        pyautogui.write(video_path)

        # Press Enter to select the file
        pyautogui.press('enter')


    def generate_description_and_tags(self,video_title):
        
        # switching to the second tab 
        self.switch_to_tab(1)

        # Sending the prompt 
        self.type("textarea#prompt-textarea", f"act as a youtube video description writer and write a description for the title:{Keys.SHIFT}{Keys.ENTER}{Keys.SHIFT}{video_title}{Keys.SHIFT}{Keys.ENTER}{Keys.SHIFT}note :The length of the text must be under 5000 characters. The wording must be simple and easy to understand. Do not include any title heading or any description heading. Just provide me text to write in description. \n",timeout=100)
        self.wait_for_element("#__next > div.relative.z-0.flex.h-full.w-full.overflow-hidden > div.relative.flex.h-full.max-w-full.flex-1.flex-col.overflow-hidden > main > div.flex.h-full.flex-col > div.w-full.pt-2.md\:pt-0.dark\:border-white\/20.md\:border-transparent.md\:dark\:border-transparent.md\:w-\[calc\(100\%-\.5rem\)\] > form > div > div.flex.w-full.items-center > div > button > span > svg",timeout=1000)
                                      
        # Sending the prompt 
        self.type("textarea#prompt-textarea", f"write 30 tags for the video with title:{Keys.SHIFT}{Keys.ENTER}{Keys.SHIFT}{video_title}{Keys.SHIFT}{Keys.ENTER}{Keys.SHIFT}note : The tags must be seperated by commas, in form of a paragraph.{Keys.SHIFT}{Keys.ENTER}{Keys.SHIFT}write these tags in form of a paragraph, seperated by commas \n",timeout=1000)
        self.wait_for_element("#__next > div.relative.z-0.flex.h-full.w-full.overflow-hidden > div.relative.flex.h-full.max-w-full.flex-1.flex-col.overflow-hidden > main > div.flex.h-full.flex-col > div.w-full.pt-2.md\:pt-0.dark\:border-white\/20.md\:border-transparent.md\:dark\:border-transparent.md\:w-\[calc\(100\%-\.5rem\)\] > form > div > div.flex.w-full.items-center > div > button > span > svg",timeout=1000)
        
        # retrieving the description response
        description = self.get_text(f'div[data-testid="conversation-turn-{self.conversation_turn}"] div div:nth-of-type(2) div:nth-of-type(2) div',timeout=100)
        
        # adding the line to give credits to the channel of whom you used the content
        description = f"Credits to {self.channel_name}" + description
        
        # making sure that the length of description is less than 5000 characters
        if len(description) > 4995:
            description = description[:4990]
            description = description.split(" ")[0]
        self.conversation_turn+=2
        
        # retrieving the tags response
        tags = self.get_text(f'div[data-testid="conversation-turn-{self.conversation_turn}"] div div:nth-of-type(2) div:nth-of-type(2) div',timeout=100)
        
        # adding some tags to the ai generated tags
        tags = "video, videos, fun, art, viral, shorts, short, best, inspirtion, motivation" + tags
        
        # making sure that the length of description is less than 500 characters
        if len(tags) > 480:
            tags = tags[:480]
            

        
        self.conversation_turn+=2
        self.switch_to_default_tab()
        return{"description":description,"tags":tags}
    
    def initial_setup(self):
        #opening Youtube
        self.open("https://www.youtube.com/")
        
        # Clicking on upload button
        self.click("/html/body/ytd-app/div[1]/div/ytd-masthead/div[4]/div[3]/div[2]/ytd-topbar-menu-button-renderer[1]/div/a/yt-icon-button/button",timeout=30)
        self.click("/html/body/ytd-app/ytd-popup-container/tp-yt-iron-dropdown/div/ytd-multi-page-menu-renderer/div[3]/div[1]/yt-multi-page-menu-section-renderer/div[2]/ytd-compact-link-renderer[1]/a",timeout=20)
        
        # opening a new tab for chatgpt to generate video description and tags.
        self.open_new_tab()
        self.open("https://chat.openai.com")
        

        self.switch_to_default_tab()
        
        # this variable is used to access the responses from chatgpt. It starts from chat id 3 and goes with an increment of 2 for every response. 
        self.conversation_turn = 3

        